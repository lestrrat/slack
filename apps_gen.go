package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!

import (
	"context"
	"net/url"
	"strconv"
	"strings"

	"github.com/lestrrat-go/slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = strings.Index
var _ = objects.EpochTime(0)

// AppsUninstallCall is created by AppsService.Uninstall method call
type AppsUninstallCall struct {
	service      *AppsService
	clientID     string
	clientSecret string
}

// Uninstall creates a AppsUninstallCall object in preparation for accessing the apps.uninstall endpoint
func (s *AppsService) Uninstall(clientID string, clientSecret string) *AppsUninstallCall {
	var call AppsUninstallCall
	call.service = s
	call.clientID = clientID
	call.clientSecret = clientSecret
	return &call
}

// ValidateArgs checks that all required fields are set in the AppsUninstallCall object
func (c *AppsUninstallCall) ValidateArgs() error {
	if len(c.clientID) <= 0 {
		return errors.New(`required field clientID not initialized`)
	}
	if len(c.clientSecret) <= 0 {
		return errors.New(`required field clientSecret not initialized`)
	}
	return nil
}

// Values returns the AppsUninstallCall object as url.Values
func (c *AppsUninstallCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	v.Set("client_id", c.clientID)

	v.Set("client_secret", c.clientSecret)
	return v, nil
}

// Do executes the call to access apps.uninstall endpoint
func (c *AppsUninstallCall) Do(ctx context.Context) error {
	const endpoint = "apps.uninstall"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to apps.uninstall`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *AppsUninstallCall) FromValues(v url.Values) error {
	var tmp AppsUninstallCall
	if raw := strings.TrimSpace(v.Get("client_id")); len(raw) > 0 {
		tmp.clientID = raw
	}
	if raw := strings.TrimSpace(v.Get("client_secret")); len(raw) > 0 {
		tmp.clientSecret = raw
	}
	*c = tmp
	return nil
}
