package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!

import (
	"context"
	"net/url"
	"strconv"
	"strings"

	"github.com/lestrrat-go/slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = strings.Index
var _ = objects.EpochTime(0)

// AppsPermissionsResourcesListCall is created by AppsPermissionsResourcesService.List method call
type AppsPermissionsResourcesListCall struct {
	service *AppsPermissionsResourcesService
	cursor  string // Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
	limit   int    // The maximum number of items to return.
}

// List creates a AppsPermissionsResourcesListCall object in preparation for accessing the apps.permissions.resources.list endpoint
func (s *AppsPermissionsResourcesService) List() *AppsPermissionsResourcesListCall {
	var call AppsPermissionsResourcesListCall
	call.service = s
	return &call
}

// Cursor sets the value for optional cursor parameter
func (c *AppsPermissionsResourcesListCall) Cursor(cursor string) *AppsPermissionsResourcesListCall {
	c.cursor = cursor
	return c
}

// Limit sets the value for optional limit parameter
func (c *AppsPermissionsResourcesListCall) Limit(limit int) *AppsPermissionsResourcesListCall {
	c.limit = limit
	return c
}

// ValidateArgs checks that all required fields are set in the AppsPermissionsResourcesListCall object
func (c *AppsPermissionsResourcesListCall) ValidateArgs() error {
	return nil
}

// Values returns the AppsPermissionsResourcesListCall object as url.Values
func (c *AppsPermissionsResourcesListCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	if len(c.cursor) > 0 {
		v.Set("cursor", c.cursor)
	}

	if c.limit > 0 {
		v.Set("limit", strconv.Itoa(c.limit))
	}
	return v, nil
}

// Do executes the call to access apps.permissions.resources.list endpoint
func (c *AppsPermissionsResourcesListCall) Do(ctx context.Context) error {
	const endpoint = "apps.permissions.resources.list"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to apps.permissions.resources.list`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *AppsPermissionsResourcesListCall) FromValues(v url.Values) error {
	var tmp AppsPermissionsResourcesListCall
	if raw := strings.TrimSpace(v.Get("cursor")); len(raw) > 0 {
		tmp.cursor = raw
	}
	if raw := strings.TrimSpace(v.Get("limit")); len(raw) > 0 {
		parsed, err := strconv.ParseInt(raw, 10, 64)
		if err != nil {
			return errors.Wrap(err, `failed to parse integer value "limit"`)
		}
		tmp.limit = int(parsed)
	}
	*c = tmp
	return nil
}
