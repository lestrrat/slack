package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!

import (
	"context"
	"net/url"
	"strconv"
	"strings"

	"github.com/lestrrat-go/slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = strings.Index
var _ = objects.EpochTime(0)

// AppsPermissionsInfoCall is created by AppsPermissionsService.Info method call
type AppsPermissionsInfoCall struct {
	service *AppsPermissionsService
}

// AppsPermissionsRequestCall is created by AppsPermissionsService.Request method call
type AppsPermissionsRequestCall struct {
	service   *AppsPermissionsService
	scopes    string // A comma separated list of scopes to request for
	triggerID string // Token used to trigger the permissions API
}

// Info creates a AppsPermissionsInfoCall object in preparation for accessing the apps.permissions.info endpoint
func (s *AppsPermissionsService) Info() *AppsPermissionsInfoCall {
	var call AppsPermissionsInfoCall
	call.service = s
	return &call
}

// ValidateArgs checks that all required fields are set in the AppsPermissionsInfoCall object
func (c *AppsPermissionsInfoCall) ValidateArgs() error {
	return nil
}

// Values returns the AppsPermissionsInfoCall object as url.Values
func (c *AppsPermissionsInfoCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)
	return v, nil
}

// Do executes the call to access apps.permissions.info endpoint
func (c *AppsPermissionsInfoCall) Do(ctx context.Context) error {
	const endpoint = "apps.permissions.info"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to apps.permissions.info`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *AppsPermissionsInfoCall) FromValues(v url.Values) error {
	var tmp AppsPermissionsInfoCall
	*c = tmp
	return nil
}

// Request creates a AppsPermissionsRequestCall object in preparation for accessing the apps.permissions.request endpoint
func (s *AppsPermissionsService) Request(scopes string, triggerID string) *AppsPermissionsRequestCall {
	var call AppsPermissionsRequestCall
	call.service = s
	call.scopes = scopes
	call.triggerID = triggerID
	return &call
}

// ValidateArgs checks that all required fields are set in the AppsPermissionsRequestCall object
func (c *AppsPermissionsRequestCall) ValidateArgs() error {
	if len(c.scopes) <= 0 {
		return errors.New(`required field scopes not initialized`)
	}
	if len(c.triggerID) <= 0 {
		return errors.New(`required field triggerID not initialized`)
	}
	return nil
}

// Values returns the AppsPermissionsRequestCall object as url.Values
func (c *AppsPermissionsRequestCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	v.Set("scopes", c.scopes)

	v.Set("trigger_id", c.triggerID)
	return v, nil
}

// Do executes the call to access apps.permissions.request endpoint
func (c *AppsPermissionsRequestCall) Do(ctx context.Context) error {
	const endpoint = "apps.permissions.request"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to apps.permissions.request`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *AppsPermissionsRequestCall) FromValues(v url.Values) error {
	var tmp AppsPermissionsRequestCall
	if raw := strings.TrimSpace(v.Get("scopes")); len(raw) > 0 {
		tmp.scopes = raw
	}
	if raw := strings.TrimSpace(v.Get("trigger_id")); len(raw) > 0 {
		tmp.triggerID = raw
	}
	*c = tmp
	return nil
}
