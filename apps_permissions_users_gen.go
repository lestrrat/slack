package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!

import (
	"context"
	"net/url"
	"strconv"
	"strings"

	"github.com/lestrrat-go/slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = strings.Index
var _ = objects.EpochTime(0)

// AppsPermissionsUsersListCall is created by AppsPermissionsUsersService.List method call
type AppsPermissionsUsersListCall struct {
	service *AppsPermissionsUsersService
	cursor  string // Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
	limit   int    // The maximum number of items to return.
}

// AppsPermissionsUsersRequestCall is created by AppsPermissionsUsersService.Request method call
type AppsPermissionsUsersRequestCall struct {
	service   *AppsPermissionsUsersService
	scopes    string // A comma separated list of scopes to request for
	triggerID string // Token used to trigger the permissions API
	user      string // The user this scope is being requested for
}

// List creates a AppsPermissionsUsersListCall object in preparation for accessing the apps.permissions.users.list endpoint
func (s *AppsPermissionsUsersService) List() *AppsPermissionsUsersListCall {
	var call AppsPermissionsUsersListCall
	call.service = s
	return &call
}

// Cursor sets the value for optional cursor parameter
func (c *AppsPermissionsUsersListCall) Cursor(cursor string) *AppsPermissionsUsersListCall {
	c.cursor = cursor
	return c
}

// Limit sets the value for optional limit parameter
func (c *AppsPermissionsUsersListCall) Limit(limit int) *AppsPermissionsUsersListCall {
	c.limit = limit
	return c
}

// ValidateArgs checks that all required fields are set in the AppsPermissionsUsersListCall object
func (c *AppsPermissionsUsersListCall) ValidateArgs() error {
	return nil
}

// Values returns the AppsPermissionsUsersListCall object as url.Values
func (c *AppsPermissionsUsersListCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	if len(c.cursor) > 0 {
		v.Set("cursor", c.cursor)
	}

	if c.limit > 0 {
		v.Set("limit", strconv.Itoa(c.limit))
	}
	return v, nil
}

// Do executes the call to access apps.permissions.users.list endpoint
func (c *AppsPermissionsUsersListCall) Do(ctx context.Context) error {
	const endpoint = "apps.permissions.users.list"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to apps.permissions.users.list`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *AppsPermissionsUsersListCall) FromValues(v url.Values) error {
	var tmp AppsPermissionsUsersListCall
	if raw := strings.TrimSpace(v.Get("cursor")); len(raw) > 0 {
		tmp.cursor = raw
	}
	if raw := strings.TrimSpace(v.Get("limit")); len(raw) > 0 {
		parsed, err := strconv.ParseInt(raw, 10, 64)
		if err != nil {
			return errors.Wrap(err, `failed to parse integer value "limit"`)
		}
		tmp.limit = int(parsed)
	}
	*c = tmp
	return nil
}

// Request creates a AppsPermissionsUsersRequestCall object in preparation for accessing the apps.permissions.users.request endpoint
func (s *AppsPermissionsUsersService) Request(scopes string, triggerID string, user string) *AppsPermissionsUsersRequestCall {
	var call AppsPermissionsUsersRequestCall
	call.service = s
	call.scopes = scopes
	call.triggerID = triggerID
	call.user = user
	return &call
}

// ValidateArgs checks that all required fields are set in the AppsPermissionsUsersRequestCall object
func (c *AppsPermissionsUsersRequestCall) ValidateArgs() error {
	if len(c.scopes) <= 0 {
		return errors.New(`required field scopes not initialized`)
	}
	if len(c.triggerID) <= 0 {
		return errors.New(`required field triggerID not initialized`)
	}
	if len(c.user) <= 0 {
		return errors.New(`required field user not initialized`)
	}
	return nil
}

// Values returns the AppsPermissionsUsersRequestCall object as url.Values
func (c *AppsPermissionsUsersRequestCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	v.Set("scopes", c.scopes)

	v.Set("trigger_id", c.triggerID)

	v.Set("user", c.user)
	return v, nil
}

// Do executes the call to access apps.permissions.users.request endpoint
func (c *AppsPermissionsUsersRequestCall) Do(ctx context.Context) error {
	const endpoint = "apps.permissions.users.request"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to apps.permissions.users.request`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *AppsPermissionsUsersRequestCall) FromValues(v url.Values) error {
	var tmp AppsPermissionsUsersRequestCall
	if raw := strings.TrimSpace(v.Get("scopes")); len(raw) > 0 {
		tmp.scopes = raw
	}
	if raw := strings.TrimSpace(v.Get("trigger_id")); len(raw) > 0 {
		tmp.triggerID = raw
	}
	if raw := strings.TrimSpace(v.Get("user")); len(raw) > 0 {
		tmp.user = raw
	}
	*c = tmp
	return nil
}
